C51 COMPILER V9.59.0.0   BSP_UART                                                          12/05/2018 11:04:33 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE BSP_UART
OBJECT MODULE PLACED IN .\Objects\bsp_uart.obj
COMPILER INVOKED BY: E:\MDK\C51\BIN\C51.EXE ..\bsp\bsp_uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\bsp;..\lib;..\TimeOut;.
                    -.\user;..\bsp\key) DEBUG OBJECTEXTEND PRINT(.\Listings\bsp_uart.lst) OBJECT(.\Objects\bsp_uart.obj)

line level    source

   1          #include "bsp_uart.h"
   2          #include "string.h"
   3          
   4          unsigned char Uart1SendFlag,Uart1ReceiveFlag;
   5          unsigned char Rev_String[REV_BUF_SIZE];
   6          
   7          char Rev_Flag;
   8          
   9          extern unsigned char Data;
  10          extern char rev_cmp_flag;
  11          
  12          /***************************************************接收数据的变量定义************************************
             -****/
  13          unsigned char Rev_Num,Rev_Sum;
  14          unsigned int Temp;
  15          
  16          
  17          void Uart_Init(unsigned char Freq,unsigned int baud)
  18          {
  19   1          P1CON &= 0xF5;                     //TX设置为强推挽输出高，RX设置为输入带上拉
  20   1              P1PH  |= 0x0A;
  21   1              
  22   1              OTCON = 0xC0;                      //串行接口SSI选择Uart1通信
  23   1              SSCON0 = 0x50;                     //设置通信方式为模式一，允许接收
  24   1              SSCON1 = Freq*1000000/baud;        //波特率低位控制
  25   1              SSCON2 = (Freq*1000000/baud)>>8;   //波特率高位控制
  26   1              IE1 = 0x01;                        //开启SSI中断     
  27   1      }
  28          
  29          
  30          
  31          /*************************************发送数据子函数*****************************************/
  32          
  33          void Uart1_Buf_TX(unsigned char DATA)
  34          {
  35   1              SSDAT = DATA;
  36   1              while(!Uart1SendFlag);
  37   1              Uart1SendFlag = 0;
  38   1      }
  39          
  40          unsigned char Send_Data(PROTOCOL_TX *p)
  41          {
  42   1          unsigned char i;
  43   1          for(i = 0; i < BUF_SIZE; i++)
  44   1          {
  45   2            Uart1_Buf_TX(p->Buf[i]);
  46   2          }
  47   1          return 0;
  48   1      }    
  49          
  50          unsigned char Protocol_Send(unsigned char id,unsigned char addr,unsigned char TX_DATA)
  51          {
  52   1        PROTOCOL_TX buf;
  53   1        memset(&buf,0,sizeof(buf));
C51 COMPILER V9.59.0.0   BSP_UART                                                          12/05/2018 11:04:33 PAGE 2   

  54   1        buf.Buf_Format.ID        = id;
  55   1        buf.Buf_Format.ADDR      = addr;
  56   1        buf.Buf_Format.DATA1     = TX_DATA;
  57   1        buf.Buf_Format.CHECKSUM  = (unsigned char)(buf.Buf_Format.ID + buf.Buf_Format.ADDR + buf.Buf_Format.DATA
             -1);   
  58   1        return Send_Data(&buf);    
  59   1      }
  60          
  61          /******************************************接收子函数********************************************/
  62          
  63          unsigned char Rev_Byte(void)
  64          {
  65   1          return SSDAT;
  66   1      }
  67          
  68          unsigned char IF_REV_STRING(void)
  69          {
  70   1        if(Rev_Num & 0x80)
  71   1        {
  72   2            Rev_Num = 0x00;
  73   2            return 1;
  74   2        }
  75   1        else 
  76   1        {
  77   2            return 0;
  78   2        }
  79   1      }
  80          
  81          void Serial_Rev_IQH(void)
  82          {
  83   1      
  84   1              volatile unsigned char Res;
  85   1          Res = Rev_Byte();
  86   1              #if 0
                      rev_buf[rev_num_] = Res;
                      
                      rev_num_ ++;
                      
                      if(rev_num_ ++ >= REV_BUF_SIZE-1){
                              rev_num_ = 0;
                              rev_cmp_flag = 1;
                      }
                      if(rev_num_ > 1){
                              if(rev_buf[0] != 0xa5){
                                      rev_num_ = 0;
                              }
                      }
                  #else
 101   1          if((Rev_Num & 0X80) == 0)
 102   1          {
 103   2              if(Rev_Num &0x40)
 104   2              {
 105   3              
 106   3                  if(Res == 0xfb)
 107   3                  {
 108   4                     Rev_Num |= 0x80; 
 109   4                      rev_cmp_flag = 1;
 110   4                  }
 111   3                  else
 112   3                  {
 113   4                     Rev_Num &= 0x00;
 114   4                  }
C51 COMPILER V9.59.0.0   BSP_UART                                                          12/05/2018 11:04:33 PAGE 3   

 115   3              }
 116   2              else
 117   2              {
 118   3                      if(Rev_Num == 5){
 119   4                          if(Res == Rev_Sum)
 120   4                          {
 121   5                              Rev_Num |= 0x40;
 122   5                          }else{
 123   5                                              Rev_Num = 0;
 124   5                                      }
 125   4                      }
 126   3                  Rev_String[Rev_Num] = Res;
 127   3                  Rev_Num ++;
 128   3                  Rev_Sum = (unsigned char)(Rev_String[0] + Rev_String[1] + Rev_String[2] + Rev_String[3] + Rev_
             -String[4]); 
 129   3                              if(Rev_String[0] != 0xA5)
 130   3                  {
 131   4                    Rev_Num = 0x00; 
 132   4                    Rev_Sum = 0;
 133   4                  }
 134   3              }
 135   2          }
 136   1              #endif
 137   1      }
 138          
 139          void Rev_Data_Handle(void)
 140          {
 141   1         if(IF_REV_STRING())
 142   1         {
 143   2             Temp = (unsigned int)Get_32Bit(Rev_String[3],Rev_String[4]);     
 144   2             memset(&Rev_String,0,sizeof(Rev_String));
 145   2             switch (Temp)
 146   2             {
 147   3                 case 0x0100:
 148   3                            Data = 0x00;
 149   3                            Rev_Flag = 1;
 150   3                            break;
 151   3                 case 0x0101:
 152   3                            Data = OPEN;
 153   3                            Rev_Flag = 1;
 154   3                            break;
 155   3                 case 0x0102:
 156   3                            Data = CLOSE;
 157   3                            Rev_Flag = 1;
 158   3                            break;
 159   3                 case 0x0103:
 160   3                            Data = OPEN;
 161   3                            Rev_Flag = 1;
 162   3                            break;
 163   3                 case 0x0104:
 164   3                            Data = HOME_POSITION;
 165   3                            Rev_Flag = 1;
 166   3                            break;
 167   3                 case 0x0105:                         
 168   3                            Data = SLEEP_POSITION;
 169   3                            Rev_Flag = 1;
 170   3                            break;
 171   3                 case 0x0106:
 172   3                            Data = WATCH_TV_POSITION;
 173   3                            Rev_Flag = 1;
 174   3                            break;
 175   3                 case 0x0107:
C51 COMPILER V9.59.0.0   BSP_UART                                                          12/05/2018 11:04:33 PAGE 4   

 176   3                            Data = READING_POSITION;
 177   3                            Rev_Flag = 1;
 178   3                            break;
 179   3                 case 0x0108:
 180   3                            Data = SET_SLEEP_POSITION;
 181   3                            Rev_Flag = 1;
 182   3                            break;
 183   3                 case 0x0109:
 184   3                            Data = SET_WATCH_TV_POSITION;
 185   3                            Rev_Flag = 1;
 186   3                            break;
 187   3                 case 0x010A:
 188   3                            Data = SET_READING_POSITION;
 189   3                            Rev_Flag = 1;
 190   3                            break;
 191   3                 case 0x010B:
 192   3                            Data = HEAD_UP;
 193   3                            Rev_Flag = 1;
 194   3                            break;
 195   3                 case 0x010C:
 196   3                            Data = HEAD_DOWN;
 197   3                            Rev_Flag = 1;
 198   3                            break;
 199   3                 case 0x010D:
 200   3                            Data = LARBUM_UP;
 201   3                            Rev_Flag = 1;
 202   3                            break;
 203   3                 case 0x010E:
 204   3                            Data = LARBUM_DOWN;
 205   3                            Rev_Flag = 1;
 206   3                            break;
 207   3                 case 0x0201:
 208   3                            Data = FOOT_LIGHT_OPEN;
 209   3                            Rev_Flag = 1;
 210   3                            break;
 211   3                 case 0x0200:
 212   3                            Data = FOOT_LIGHT_CLOSE;
 213   3                            Rev_Flag = 1;
 214   3                            break;
 215   3                 case 0x0301:
 216   3                            Data = MASS_OPEN;
 217   3                            Rev_Flag = 1;
 218   3                            break;
 219   3                 case 0x0300:
 220   3                            Data = MASS_CLOSE;
 221   3                            Rev_Flag = 1;
 222   3                            break;
 223   3                 case 0x0401:
 224   3                            Data = HEAT_ON;
 225   3                            Rev_Flag = 1;
 226   3                            break;
 227   3                 case 0x0402:
 228   3                            Data = HEAT_OFF;
 229   3                            Rev_Flag = 1;
 230   3                            break;
 231   3                 default:
 232   3                            Data = 0x00;
 233   3                            break;
 234   3             }
 235   2         }       
 236   1      }
 237          
C51 COMPILER V9.59.0.0   BSP_UART                                                          12/05/2018 11:04:33 PAGE 5   

 238          
 239          
 240          
 241          
 242          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    544    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
